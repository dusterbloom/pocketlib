// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(proofmanagerFFI)
import proofmanagerFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_proofmanager_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_proofmanager_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate class UniffiHandleMap<T> {
    private var map: [UInt64: T] = [:]
    private let lock = NSLock()
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return Data(try readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}




public protocol ProofManagerProtocol : AnyObject {
    
    func createIntentAction(debtorSeedPhrase: Data, rseedRandomness: Data, debtorIndex: UInt32, creditorAddr: String, amount: UInt64, assetId: UInt64) throws  -> String
    
    func createNote(debtorAddress: AddressData, creditorAddress: AddressData, amount: UInt64, assetId: UInt64) throws  -> Note
    
    func generateAddress(spendKeyBytes: Data, index: UInt32) throws  -> AddressData
    
    func generateKeys(seedPhrase: String) throws  -> KeyPair
    
    func signNote(seedPhrase: String, note: Note) throws  -> SignedNote
    
    func verifySignature(verificationKeyBytes: Data, commitment: Data, signature: Data) throws  -> Bool
    
}

open class ProofManager:
    ProofManagerProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_proofmanager_fn_clone_proofmanager(self.pointer, $0) }
    }
public convenience init()throws  {
    let pointer =
        try rustCallWithError(FfiConverterTypeProofError.lift) {
    uniffi_proofmanager_fn_constructor_proofmanager_new($0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_proofmanager_fn_free_proofmanager(pointer, $0) }
    }

    

    
open func createIntentAction(debtorSeedPhrase: Data, rseedRandomness: Data, debtorIndex: UInt32, creditorAddr: String, amount: UInt64, assetId: UInt64)throws  -> String {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeProofError.lift) {
    uniffi_proofmanager_fn_method_proofmanager_create_intent_action(self.uniffiClonePointer(),
        FfiConverterData.lower(debtorSeedPhrase),
        FfiConverterData.lower(rseedRandomness),
        FfiConverterUInt32.lower(debtorIndex),
        FfiConverterString.lower(creditorAddr),
        FfiConverterUInt64.lower(amount),
        FfiConverterUInt64.lower(assetId),$0
    )
})
}
    
open func createNote(debtorAddress: AddressData, creditorAddress: AddressData, amount: UInt64, assetId: UInt64)throws  -> Note {
    return try  FfiConverterTypeNote.lift(try rustCallWithError(FfiConverterTypeProofError.lift) {
    uniffi_proofmanager_fn_method_proofmanager_create_note(self.uniffiClonePointer(),
        FfiConverterTypeAddressData.lower(debtorAddress),
        FfiConverterTypeAddressData.lower(creditorAddress),
        FfiConverterUInt64.lower(amount),
        FfiConverterUInt64.lower(assetId),$0
    )
})
}
    
open func generateAddress(spendKeyBytes: Data, index: UInt32)throws  -> AddressData {
    return try  FfiConverterTypeAddressData.lift(try rustCallWithError(FfiConverterTypeProofError.lift) {
    uniffi_proofmanager_fn_method_proofmanager_generate_address(self.uniffiClonePointer(),
        FfiConverterData.lower(spendKeyBytes),
        FfiConverterUInt32.lower(index),$0
    )
})
}
    
open func generateKeys(seedPhrase: String)throws  -> KeyPair {
    return try  FfiConverterTypeKeyPair.lift(try rustCallWithError(FfiConverterTypeProofError.lift) {
    uniffi_proofmanager_fn_method_proofmanager_generate_keys(self.uniffiClonePointer(),
        FfiConverterString.lower(seedPhrase),$0
    )
})
}
    
open func signNote(seedPhrase: String, note: Note)throws  -> SignedNote {
    return try  FfiConverterTypeSignedNote.lift(try rustCallWithError(FfiConverterTypeProofError.lift) {
    uniffi_proofmanager_fn_method_proofmanager_sign_note(self.uniffiClonePointer(),
        FfiConverterString.lower(seedPhrase),
        FfiConverterTypeNote.lower(note),$0
    )
})
}
    
open func verifySignature(verificationKeyBytes: Data, commitment: Data, signature: Data)throws  -> Bool {
    return try  FfiConverterBool.lift(try rustCallWithError(FfiConverterTypeProofError.lift) {
    uniffi_proofmanager_fn_method_proofmanager_verify_signature(self.uniffiClonePointer(),
        FfiConverterData.lower(verificationKeyBytes),
        FfiConverterData.lower(commitment),
        FfiConverterData.lower(signature),$0
    )
})
}
    

}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeProofManager: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = ProofManager

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> ProofManager {
        return ProofManager(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: ProofManager) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ProofManager {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: ProofManager, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeProofManager_lift(_ pointer: UnsafeMutableRawPointer) throws -> ProofManager {
    return try FfiConverterTypeProofManager.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeProofManager_lower(_ value: ProofManager) -> UnsafeMutableRawPointer {
    return FfiConverterTypeProofManager.lower(value)
}


public struct AddressData {
    public var diversifier: Data
    public var transmissionKey: Data
    public var clueKey: Data

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(diversifier: Data, transmissionKey: Data, clueKey: Data) {
        self.diversifier = diversifier
        self.transmissionKey = transmissionKey
        self.clueKey = clueKey
    }
}



extension AddressData: Equatable, Hashable {
    public static func ==(lhs: AddressData, rhs: AddressData) -> Bool {
        if lhs.diversifier != rhs.diversifier {
            return false
        }
        if lhs.transmissionKey != rhs.transmissionKey {
            return false
        }
        if lhs.clueKey != rhs.clueKey {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(diversifier)
        hasher.combine(transmissionKey)
        hasher.combine(clueKey)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAddressData: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AddressData {
        return
            try AddressData(
                diversifier: FfiConverterData.read(from: &buf), 
                transmissionKey: FfiConverterData.read(from: &buf), 
                clueKey: FfiConverterData.read(from: &buf)
        )
    }

    public static func write(_ value: AddressData, into buf: inout [UInt8]) {
        FfiConverterData.write(value.diversifier, into: &buf)
        FfiConverterData.write(value.transmissionKey, into: &buf)
        FfiConverterData.write(value.clueKey, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAddressData_lift(_ buf: RustBuffer) throws -> AddressData {
    return try FfiConverterTypeAddressData.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAddressData_lower(_ value: AddressData) -> RustBuffer {
    return FfiConverterTypeAddressData.lower(value)
}


public struct KeyPair {
    public var spendKey: Data
    public var viewKey: Data

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(spendKey: Data, viewKey: Data) {
        self.spendKey = spendKey
        self.viewKey = viewKey
    }
}



extension KeyPair: Equatable, Hashable {
    public static func ==(lhs: KeyPair, rhs: KeyPair) -> Bool {
        if lhs.spendKey != rhs.spendKey {
            return false
        }
        if lhs.viewKey != rhs.viewKey {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(spendKey)
        hasher.combine(viewKey)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeKeyPair: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> KeyPair {
        return
            try KeyPair(
                spendKey: FfiConverterData.read(from: &buf), 
                viewKey: FfiConverterData.read(from: &buf)
        )
    }

    public static func write(_ value: KeyPair, into buf: inout [UInt8]) {
        FfiConverterData.write(value.spendKey, into: &buf)
        FfiConverterData.write(value.viewKey, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeKeyPair_lift(_ buf: RustBuffer) throws -> KeyPair {
    return try FfiConverterTypeKeyPair.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeKeyPair_lower(_ value: KeyPair) -> RustBuffer {
    return FfiConverterTypeKeyPair.lower(value)
}


public struct Note {
    public var debtorAddress: AddressData
    public var creditorAddress: AddressData
    public var amount: UInt64
    public var assetId: UInt64
    public var commitment: Data

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(debtorAddress: AddressData, creditorAddress: AddressData, amount: UInt64, assetId: UInt64, commitment: Data) {
        self.debtorAddress = debtorAddress
        self.creditorAddress = creditorAddress
        self.amount = amount
        self.assetId = assetId
        self.commitment = commitment
    }
}



extension Note: Equatable, Hashable {
    public static func ==(lhs: Note, rhs: Note) -> Bool {
        if lhs.debtorAddress != rhs.debtorAddress {
            return false
        }
        if lhs.creditorAddress != rhs.creditorAddress {
            return false
        }
        if lhs.amount != rhs.amount {
            return false
        }
        if lhs.assetId != rhs.assetId {
            return false
        }
        if lhs.commitment != rhs.commitment {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(debtorAddress)
        hasher.combine(creditorAddress)
        hasher.combine(amount)
        hasher.combine(assetId)
        hasher.combine(commitment)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeNote: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Note {
        return
            try Note(
                debtorAddress: FfiConverterTypeAddressData.read(from: &buf), 
                creditorAddress: FfiConverterTypeAddressData.read(from: &buf), 
                amount: FfiConverterUInt64.read(from: &buf), 
                assetId: FfiConverterUInt64.read(from: &buf), 
                commitment: FfiConverterData.read(from: &buf)
        )
    }

    public static func write(_ value: Note, into buf: inout [UInt8]) {
        FfiConverterTypeAddressData.write(value.debtorAddress, into: &buf)
        FfiConverterTypeAddressData.write(value.creditorAddress, into: &buf)
        FfiConverterUInt64.write(value.amount, into: &buf)
        FfiConverterUInt64.write(value.assetId, into: &buf)
        FfiConverterData.write(value.commitment, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNote_lift(_ buf: RustBuffer) throws -> Note {
    return try FfiConverterTypeNote.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNote_lower(_ value: Note) -> RustBuffer {
    return FfiConverterTypeNote.lower(value)
}


public struct SignedNote {
    public var note: Note
    public var signature: Data
    public var verificationKey: Data

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(note: Note, signature: Data, verificationKey: Data) {
        self.note = note
        self.signature = signature
        self.verificationKey = verificationKey
    }
}



extension SignedNote: Equatable, Hashable {
    public static func ==(lhs: SignedNote, rhs: SignedNote) -> Bool {
        if lhs.note != rhs.note {
            return false
        }
        if lhs.signature != rhs.signature {
            return false
        }
        if lhs.verificationKey != rhs.verificationKey {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(note)
        hasher.combine(signature)
        hasher.combine(verificationKey)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSignedNote: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SignedNote {
        return
            try SignedNote(
                note: FfiConverterTypeNote.read(from: &buf), 
                signature: FfiConverterData.read(from: &buf), 
                verificationKey: FfiConverterData.read(from: &buf)
        )
    }

    public static func write(_ value: SignedNote, into buf: inout [UInt8]) {
        FfiConverterTypeNote.write(value.note, into: &buf)
        FfiConverterData.write(value.signature, into: &buf)
        FfiConverterData.write(value.verificationKey, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSignedNote_lift(_ buf: RustBuffer) throws -> SignedNote {
    return try FfiConverterTypeSignedNote.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSignedNote_lower(_ value: SignedNote) -> RustBuffer {
    return FfiConverterTypeSignedNote.lower(value)
}


public enum ProofError {

    
    
    case InvalidSeed
    case InvalidKey
    case InvalidSignature
    case NoteError(String
    )
    case IntentError(String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeProofError: FfiConverterRustBuffer {
    typealias SwiftType = ProofError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ProofError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .InvalidSeed
        case 2: return .InvalidKey
        case 3: return .InvalidSignature
        case 4: return .NoteError(
            try FfiConverterString.read(from: &buf)
            )
        case 5: return .IntentError(
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ProofError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case .InvalidSeed:
            writeInt(&buf, Int32(1))
        
        
        case .InvalidKey:
            writeInt(&buf, Int32(2))
        
        
        case .InvalidSignature:
            writeInt(&buf, Int32(3))
        
        
        case let .NoteError(v1):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .IntentError(v1):
            writeInt(&buf, Int32(5))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


extension ProofError: Equatable, Hashable {}

extension ProofError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_proofmanager_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_proofmanager_checksum_method_proofmanager_create_intent_action() != 51174) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_proofmanager_checksum_method_proofmanager_create_note() != 45218) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_proofmanager_checksum_method_proofmanager_generate_address() != 379) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_proofmanager_checksum_method_proofmanager_generate_keys() != 37455) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_proofmanager_checksum_method_proofmanager_sign_note() != 60978) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_proofmanager_checksum_method_proofmanager_verify_signature() != 51127) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_proofmanager_checksum_constructor_proofmanager_new() != 10641) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}()

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all